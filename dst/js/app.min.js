"use strict";
/*! Copyright Jan Wolf */
function AboutItem() {

	AboutItem.prototype.setDate = function(date_string) {
		var date = new Date(date_string);
		year.html(date.getFullYear().toString().substring(2,4));
		day.html((date.getDate() < 10 ? '0' : '') + date.getDate());
		month.html((date.getMonth() < 9 ? '0' : '') + (date.getMonth() + 1));
	};

	AboutItem.prototype.setLocation = function(lat, lng) {
		// Add zeros.
		while(lat.toString().length < 8) lat += '0';
		while(lng.toString().length < 8) lng += '0';
		latitude.html(lat.toString().substring(0,8));
		longitude.html(lng.toString().substring(0,8));
	};

	AboutItem.prototype.setDescription = function(text) {
		// Delete previous text.
		description_typed.empty();
		description_hidden.empty();

		/*
		var intervalObject = description_typed.data('text-animation-object');
		if(intervalObject !== undefined) clearInterval(intervalObject);


		// Get animation parameters.
		var typeSpeed = description_typed.attr('data-type-speed');
		*/

		// Stop here, if no new description is set.
		if(text == null) return;

		// If there is a description set, add text and animation.
		description_hidden.html(text);
		description_typed.html(text);

		/*
		description_typed.data('text-animation-object', setInterval(function(){
			// Clear animation object, when done.
			if(text === description_typed.html()){
				clearInterval(description_typed.data('text-animation-object'));
				console.log('Clear animation object.');
				return;
			}

			// Add a new letter.
			description_typed.html(text.substring(0, description_typed.html().length + 1));
		}, typeSpeed === undefined ? 100 : typeSpeed));
		*/
	};

	var about = $('.about-item');
	var year = about.find('.year' );
	var day = about.find('.day' );
	var month = about.find('.month' );
	var latitude = about.find('.lat' );
	var longitude = about.find('.lng' );
	var description = about.find('.description' );
	var description_hidden = description.find('.hidden-text' );
	var description_typed = description.find('.typed-text' );
}

"use strict";
/*! Copyright Jan Wolf */
(function ( $ ) {
	$(document).ready(function() {
		// Initialize modules.
		var map = new Map();
		var about = new AboutItem();
		var timeline = new Timeline();
		var pulsar = new PulsarPoint();
		var volume = new VolumeToggle();

		// Initialize audio.
		var audio = $('audio');

		// Get data of targets.
		$.getJSON( 'data/targets.json', function ( items ) {
			// Is there at least one item?
			if(items.length <= 0) return;

			// Set initial map position.
			map.setLocation(items[0].lat, items[0].lng);

			// Initialize timeline.
			timeline.addOnChangeListener(function(item){
				// Update pulsar.
				pulsar.stop();

				// Trigger events.
				audio.data('loops', 0);
				audio.off('loadstart');
				audio.on('loadstart', function(){
					// Audio file is loading.
					void 0;
					audio.data('ready', false);

					// Seek to the start.
					this.currentTime = 0;
				});
				audio.trigger('pause');
				audio.attr('src', 'data/' + item.file);

				audio.off('canplay');
				audio.on('canplay', function() {
					// Audio file is ready.
					void 0;
					audio.data('ready', true);
				} );

				audio.off('playwhenready');
				audio.on('playwhenready', function(){
					// Play function.
					var play = function(){
						void 0;
						audio.trigger('play');
						pulsar.start();
					};

					// Play audio and start pulsar if already ready.
					if(audio.data('ready') === true) return play();

					// Wait for it.
					void 0;
					audio.on('canplay', play);
				});

				audio.off('ended');
				audio.on('ended', function() {
					void 0;
					// Trigger text.
					var loops = audio.data('loops');
					if(loops == 0) about.setDescription(item.description);

					// Loop it.
					audio.data('loops', loops + 1);
					audio.trigger('play');
				});

				// Update about information.
				about.setDate(item.date);
				about.setDescription(null);

				// Update map location and set callback for the animation handling.
				map.animateLocationMove(item.lat, item.lng, 2000, function(lat, lng, delta) {
					// Update coordinates.
					about.setLocation(lat, lng);

					// Start pulsating.
					void 0;
					if(delta >= 1) audio.trigger('playwhenready');
				});
			});

			// Set items of the timeline.
			timeline.setData(items);

			// Bind keys.
			$(document).keyup(function(e) {
				switch ( (e.keyCode ? e.keyCode : e.which) ) {
					case 37: // Left Arrow.
					case 38: // Up Arrow.
						timeline.previousTarget();
						break;
					case 39: // Right Arrow.
					case 40: // Down Arrow.
						timeline.nextTarget();
						break;
				}
			} );

			var overviewClickListener = function(){
				var overview = $('.overview').removeClass('fadeInDown fadeOutUp');
				var stage = $('.stage').removeClass('fadeOutDown fadeInUp');

				if($(this).is('.open-overview')) {
					stage.addClass('fadeOutDown');
					overview.show().addClass('fadeInDown');
					volume.mute();
				}

				if($(this ).is('.close-overview')) {
					overview.addClass('fadeOutUp');
					stage.addClass('fadeInUp');
					setTimeout(function(){
						overview.hide();
					}, 1000);

					// Set timeline position to the first one.
					if(timeline.getCurrentTarget() === undefined) {
						timeline.setTarget(0);
					} else {
						volume.unmute();
					}
				}
			};

			// Bind overview button toggles.
			$('.close-overview').click(overviewClickListener);
			$('.open-overview').click(overviewClickListener ).click(function(){
				// Change text of the button accordingly.
				var close_overview_button = $('.close-overview');
				var on_click_text = close_overview_button.attr('data-onclick-text');
				if( on_click_text !== undefined ) close_overview_button.html(on_click_text);
			});
		} );
	});
}(jQuery));

"use strict";
/*! Copyright Jan Wolf */
function Map() {

	Map.prototype.setLocation = function(lat, lng){
		location = new google.maps.LatLng( lat, lng );
		map.setCenter(location);
	};

	Map.prototype.animateLocationMove = function(lat, lng, millis, moveCallback) {
		var framesPerSecond = 28;
		var initialMillis = Date.now();
		var initialLat = location.lat();
		var initialLng = location.lng();

		// Set new interval.
		var intervalObject = $map.data('intervalObject');
		if(intervalObject !== undefined) clearInterval(intervalObject);
		$map.data('intervalObject', setInterval(function(){
			// Calculate new coordinates.
			var delta = ( Date.now() - initialMillis ) / millis;
			var deltaEased = delta < 0.5 ? 2 * delta * delta : -1 + (4 - 2 * delta) * delta;
			deltaEased = Math.round(deltaEased * 1000) / 1000;
			var newLat = initialLat + (lat - initialLat) * deltaEased;
			var newLng = initialLng + (lng - initialLng) * deltaEased;

			// Set new location.
			Map.prototype.setLocation(newLat, newLng);
			moveCallback(newLat, newLng, deltaEased);

			// Stop animation if final point was reached.
			if(deltaEased >= 1) clearInterval($map.data('intervalObject'));
		}, 1000 / framesPerSecond));
	};

	// Initialize map.
	var $map = $('.map');
	if($map.length == 0) return;

	var styles = [
		{
			"featureType": "administrative.country",
			"elementType": "labels.text.fill",
			"stylers": [
				{ "visibility": "on" },
				{ "lightness": 5 }
			]
		},{
			"elementType": "labels.text.stroke",
			"stylers": [
				{ "visibility": "off" }
			]
		},{
			"featureType": "administrative.province",
			"stylers": [
				{ "visibility": "off" }
			]
		},{
			"featureType": "landscape",
			"stylers": [
				{ "visibility": "off" }
			]
		},{
			"featureType": "administrative.locality",
			"stylers": [
				{ "visibility": "off" }
			]
		},{
			"featureType": "transit",
			"stylers": [
				{ "visibility": "off" }
			]
		},{
			"featureType": "road",
			"stylers": [
				{ "visibility": "off" }
			]
		},{
			"featureType": "administrative.country",
			"elementType": "geometry.stroke",
			"stylers": [
				{ "visibility": "on" },
				{ "lightness": 5 }
			]
		},{
			"featureType": "poi",
			"stylers": [
				{ "visibility": "off" }
			]
		},{
			"featureType": "water",
			"elementType": "labels",
			"stylers": [
				{ "visibility": "off" }
			]
		},{
			"featureType": "landscape",
			"elementType": "geometry.fill",
			"stylers": [
				{ "visibility": "on" },
				{ "color": "#dfc0a9" }
			]
		},{
			"featureType": "water",
			"elementType": "geometry.fill",
			"stylers": [
				{ "color": "#ffeee3" }
			]
		}
	];

	// Set location.;
	var location = new google.maps.LatLng(0, 0);

	// Set options.
	var options = {
		mapTypeControlOptions: {
			mapTypeIds: ['Styled']
		},
		center: location,
		zoom: 5,
		scrollwheel: false,
		navigationControl: false,
		mapTypeControl: false,
		disableDoubleClickZoom: true,
		keyboardShortcuts: false,
		tilt: 45,
		zoomControl: false,
		draggable: false,
		disableDefaultUI: true,
		mapTypeId: 'Styled'
	};

	// Get the div.
	var map = new google.maps.Map($map[0], options);

	// Style Map.
	var styledMapType = new google.maps.StyledMapType(styles, { name: 'Styled' });
	map.mapTypes.set('Styled', styledMapType);

	// Move masks.
	google.maps.event.addListenerOnce(map, 'bounds_changed', function(){
		$('.mask' ).appendTo($map.find('.gm-style'));
	});

	// Resize.
	google.maps.event.addDomListener(window, 'resize', function() {
		map.setCenter(location);
	});
}

"use strict";
/*! Copyright Jan Wolf */
function PulsarPoint() {

	PulsarPoint.prototype.start = function() {
		// Set start time.
		start = Date.now();

		// Draw frame.
		animationId = window.requestAnimationFrame(PulsarPoint.prototype.draw);
	};

	PulsarPoint.prototype.stop = function(){
		cancelAnimationFrame(animationId);
		PulsarPoint.prototype.clear();
	};

	PulsarPoint.prototype.clear = function(){
		pulsar_context.clearRect(0, 0, canvas_size.main, canvas_size.main);

		// Pulsar point.
		pulsar_context.beginPath();
		pulsar_context.arc(canvas_size.main / 2, canvas_size.main / 2, wave.dot_size / 2, 0, 2 * Math.PI, false);
		pulsar_context.fillStyle = 'rgba(0, 0, 0, 0.5)';
		pulsar_context.fill();
	};

	PulsarPoint.prototype.draw = function() {
		// Clear.
		PulsarPoint.prototype.clear();

		// Get current time.
		var now = Date.now();

		// Get progress.
		var progress = ( ( now - start ) % wave.duration ) / wave.duration;

		// Draw wave.
		pulsar_context.beginPath();
		pulsar_context.arc(canvas_size.main / 2, canvas_size.main / 2, wave.dot_size / 2 + ( canvas_size.main - wave.dot_size ) / 2 * progress , 0, 2 * Math.PI, false);
		pulsar_context.lineWidth = wave.thickness.start + progress * ( wave.thickness.end - wave.thickness.start );
		var alpha = wave.alpha.start + progress * ( wave.alpha.end - wave.alpha.start);
		pulsar_context.strokeStyle = 'rgba(0, 0, 0, ' +  alpha + ')';
		pulsar_context.stroke();

		// Request next frame.
		animationId = window.requestAnimationFrame(PulsarPoint.prototype.draw);
	};

	// Parameters for the animation.
	var canvas_size = {
		main: 500,
		main_rem: 15
	};

	var wave = {
		duration: 10000,
		dot_size: 1 / canvas_size.main_rem * canvas_size.main,
		thickness: {
			start: 0.1 / canvas_size.main_rem * canvas_size.main,
			end: 0.5 / canvas_size.main_rem * canvas_size.main
		},
		alpha: {
			start: 0.5,
			end: 0
		}
	};
	void 0;

	// Get the pulsar point.
	var pulsar = $( '.pulsar-point' );
	pulsar[0].width  = canvas_size.main;
	pulsar[0].height = canvas_size.main;
	var pulsar_context = pulsar[0 ].getContext('2d');

	// Timestamp.
	var start;
	var animationId;
}

"use strict";
/*! Copyright Jan Wolf */
function Timeline() {

	Timeline.prototype.addOnChangeListener = function(onChangeListener) {
		onChangeListeners.push(onChangeListener);
	};

	Timeline.prototype.getCurrentTarget = function(){
		return this.currentIndex;
	};

	Timeline.prototype.setTarget = function(index){
		// Update target info.
		this.currentIndex = index;
		var currentTarget = this.items[index];

		// Update target element.
		timeline.children().removeClass('current' ).eq(this.currentIndex).addClass('current');

		// Call OnChangeListeners.
		onChangeListeners.forEach(function(onChangeListener){
			onChangeListener(currentTarget);
		});
	};

	Timeline.prototype.nextTarget = function(){
		this.setTarget(this.currentIndex >= this.items.length - 1 ? 0 : this.currentIndex + 1);
	};

	Timeline.prototype.previousTarget = function(){
		this.setTarget(this.currentIndex == 0 ? this.items.length - 1 : this.currentIndex - 1);
	};

	Timeline.prototype.setData = function(data) {
		// Set data as items.
		this.items = data;

		// Copy of this object.
		var $this = this;

		// Build all target targets.
		for ( var i = 0; i < this.items.length; i++ ) {
			// Build main element.
			var target = $( '<div/>', {
				'style': 'height: ' + (100 / this.items.length) + '%;',
				'class': 'target',
				click: function(){
					$this.setTarget($(this).index());
				}
			} );

			// Build indicator text.
			var date = new Date(this.items[i].date);
			target.append($( '<div/>', {
				'class': 'indicator',
				'html': '<span class="month">' + (date.getMonth() < 9 ? '0' : '') + (date.getMonth() + 1) + '</span>' +
				'<span class="day">' + (date.getDate() < 10 ? '0' : '') + date.getDate() + '</span>' +
				'<span class="year">' + date.getFullYear().toString().substring(2,4) + '</span>'
			}));

			// Add hover event to the targets.
			target.hover( targetMouseOver, targetMouseOut );

			// Add it to the timeline.
			$( timeline ).append( target );
		}
	};

	/**
	 * On mouse over.
 	 */
	var targetMouseOver = function () {
		// The centered element.
		$( this ).addClass( 'hovered' );

		// The surrounding elements.
		var prev = $( this ).prev().addClass( 'hovered-surround-0' );
		var next = $( this ).next().addClass( 'hovered-surround-0' );
		prev = prev.prev().addClass( 'hovered-surround-1' );
		next = next.next().addClass( 'hovered-surround-1' );
		prev.prev().addClass( 'hovered-surround-2' );
		next.next().addClass( 'hovered-surround-2' );
	};

	/**
	 * On mouse out.
 	 */
	var targetMouseOut = function () {
		$( this ).siblings().andSelf().removeClass( 'hovered hovered-surround-0 hovered-surround-1 hovered-surround-2' );
	};

	// Array that holds all OnChangeListener.
	var onChangeListeners = [];

	// The wrapper that will contain all targets.
	var timeline = $( '.timeline .inner' );
}

"use strict";
/*! Copyright Jan Wolf */
function VolumeToggle() {

	VolumeToggle.prototype.toggleMute = function() {
		audio.prop("muted",!audio.prop("muted"));
		$('.volume-toggle').toggleClass('fa-volume-off fa-volume-up');
	};

	VolumeToggle.prototype.mute = function(){
		audio.prop("muted", true);
		$('.volume-toggle').addClass('fa-volume-off' ).removeClass('fa-volume-up');
	};

	VolumeToggle.prototype.unmute = function(){
		audio.prop("muted", false);
		$('.volume-toggle').removeClass('fa-volume-off' ).addClass('fa-volume-up');
	};

	// Initialize audio.
	var audio = $('audio');

	// Bind click listener of mute toggle.
	$('.volume-toggle').click(function(){
		VolumeToggle.prototype.toggleMute();
	});
}
